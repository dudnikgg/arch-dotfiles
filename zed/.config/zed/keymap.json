[
    {
        "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
        "bindings": {
            // put key-bindings here if you want them to work in normal & visual mode
            // Git
            "space g h d": "editor::ToggleSelectedDiffHunks",
            "space g s": "git_panel::ToggleFocus",

            // Toggle inlay hints
            "space t i": "editor::ToggleInlayHints",

            // Toggle soft wrap
            "space u w": "editor::ToggleSoftWrap",

            // NOTE: Toggle Zen mode, not fully working yet
            "space c z": "workspace::ToggleCenteredLayout",

            // Open markdown preview
            "space m p": "markdown::OpenPreview",
            "space m P": "markdown::OpenPreviewToTheSide",

            // Open recent project
            "space f p": "projects::OpenRecent",
            // Search word under cursor
            "space s w": "pane::DeploySearch",

            // Chat with AI
            "space a c": "assistant::ToggleFocus",
            // Go to file with `gf`
            "g f": "editor::OpenExcerpts"
        }
    },
    {
        "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
        "bindings": {
            // put key-bindings here if you want them to work only in normal mode
            // Window movement bindings
            // Ctrl jklk to move between panes
            "space  left": "workspace::ActivatePaneLeft",
            "space right": "workspace::ActivatePaneRight",
            "space up": "workspace::ActivatePaneUp",
            "space down": "workspace::ActivatePaneDown",

            // "caw": "vim::wor"

            // +LSP
            "space c a": "editor::ToggleCodeActions",
            "space .": "editor::ToggleCodeActions",
            "space c r": "editor::Rename",
            "g d": "editor::GoToDefinition",
            "g D": "editor::GoToDefinitionSplit",
            "g i": "editor::GoToImplementation",
            "g I": "editor::GoToImplementationSplit",
            "g t": "editor::GoToTypeDefinition",
            "g T": "editor::GoToTypeDefinitionSplit",
            "g r": "editor::FindAllReferences",
            "] d": "editor::GoToDiagnostic",
            "[ d": "editor::GoToPreviousDiagnostic",
            // TODO: Go to next/prev error
            "] e": "editor::GoToDiagnostic",
            "[ e": "editor::GoToPreviousDiagnostic",
            // Symbol search
            "s s": "outline::Toggle",
            "s S": "project_symbols::Toggle",
            // Diagnostic
            "space x x": "diagnostics::Deploy",

            // +Git
            // Git prev/next hunk
            "] h": "editor::GoToHunk",
            "[ h": "editor::GoToPreviousHunk",

            // TODO: git diff is not ready yet, refer https://github.com/zed-industries/zed/issues/8665#issuecomment-2194000497

            // + Buffers
            // Switch between buffers
            "shift-left": "pane::ActivatePreviousItem",
            "shift-right": "pane::ActivateNextItem",
            // Close active panel
            // "shift-q": "pane::CloseActiveItem",
            // "ctrl-q": "pane::CloseActiveItem",
            "space b d": "pane::CloseActiveItem",
            // Close other items
            "space b o": "pane::CloseInactiveItems",
            // Save file
            "ctrl-s": "workspace::Save",
            // File finder
            "space space": "file_finder::Toggle",
            // Project search
            "space /": "pane::DeploySearch",
            // TODO: Open other files
            // Show project panel with current file
            // "space e": "pane::RevealInProjectPanel",
            "space e": "project_panel::ToggleFocus",
            "space g b": "git::Blame"
        }
    },
    // Empty pane, set of keybindings that are available when there is no active editor
    {
        "context": "EmptyPane || SharedScreen",
        "bindings": {
            // Open file finder
            "space space": "file_finder::Toggle",
            // Open recent project
            "space f p": "projects::OpenRecent",
            "space e": "project_panel::ToggleFocus"
        }
    },
    // Comment code
    {
        "context": "Editor && vim_mode == visual && !VimWaiting && !menu",
        "bindings": {
            // visual, visual line & visual block modes
            "g c": "editor::ToggleComments"
        }
    },
    // Better escape
    {
        "context": "Editor && vim_mode == insert && !menu",
        "bindings": {
            "j j": "vim::NormalBefore", // remap jj in insert mode to escape
            "j k": "vim::NormalBefore" // remap jk in insert mode to escape
        }
    },
    // Rename
    {
        "context": "Editor && vim_operator == c",
        "bindings": {
            "c": "vim::CurrentLine",
            "r": "editor::Rename" // zed specific
        }
    },
    // Code Action
    {
        "context": "Editor && vim_operator == c",
        "bindings": {
            "c": "vim::CurrentLine",
            "a": "editor::ToggleCodeActions" // zed specific
        }
    },
    // Toggle terminal
    {
        "context": "Workspace",
        "bindings": {
            "space `": "terminal_panel::ToggleFocus"
        }
    },
    {
        // "context": "GitPanel && ChangesList",
        // "bindings": {}
    },
    {
        "context": "Terminal",
        "bindings": {
            "ctrl-left": "workspace::ActivatePaneLeft",
            "ctrl-right": "workspace::ActivatePaneRight",
            "ctrl-up": "workspace::ActivatePaneUp",
            "ctrl-down": "workspace::ActivatePaneDown",
            "space `": "terminal_panel::ToggleFocus",
            "space b d": "pane::CloseActiveItem",
            "alt-left": "vim::PreviousWordStart",
            "alt-right": "vim::NextWordStart",
            "alt-w": ["terminal::SendKeystroke", "ctrl-w"]
        }
    },
    {
        "context": "Editor && mode == full",
        "bindings": {
            "space o": "outline::Toggle"
        }
    },
    {
        "context": "OutlinePanel",
        "bindings": {
            // "q": "workspace::ToggleLeftDock",
            "space b d": "workspace::ToggleLeftDock"
        }
    },
    // File panel (netrw)
    {
        "context": "ProjectPanel && not_editing",
        "bindings": {
            "a": "project_panel::NewFile",
            "A": "project_panel::NewDirectory",
            "r": "project_panel::Rename",
            "d": "project_panel::Delete",
            "x": "project_panel::Cut",
            "y": "project_panel::Copy",
            "p": "project_panel::Paste",
            // Close project panel as project file panel on the right
            "q": "workspace::ToggleRightDock",
            "space e": "workspace::ToggleRightDock",
            // Navigate between panel
            "space left": "workspace::ActivatePaneLeft",
            "space right": "workspace::ActivatePaneRight",
            "space up": "workspace::ActivatePaneUp",
            "space down": "workspace::ActivatePaneDown"
        }
    },
    // Panel nagivation
    {
        "context": "Dock",
        "bindings": {
            "space left": "workspace::ActivatePaneLeft",
            "space right": "workspace::ActivatePaneRight",
            "space up": "workspace::ActivatePaneUp",
            "space down": "workspace::ActivatePaneDown"
        }
    },
    {
        "context": "Workspace",
        "bindings": {
            // Map VSCode like keybindings
            // "cmd-b": "workspace::ToggleRightDock"
        }
    },
    // Run nearest task
    {
        "context": "EmptyPane || SharedScreen || vim_mode == normal",
        "bindings": {
            "space r t": ["editor::SpawnNearestTask", { "reveal": "no_focus" }]
        }
    },
    // Sneak motion, refer https://github.com/zed-industries/zed/pull/22793/files#diff-90c0cb07588e2f309c31f0bb17096728b8f4e0bad71f3152d4d81ca867321c68
    {
        "context": "vim_mode == normal || vim_mode == visual",
        "bindings": {
            "s": ["vim::PushSneak", {}],
            "S": ["vim::PushSneakBackward", {}]
        }
    }
    // Subword motion is not working really nice with `ciw`, disable for now
    // {
    //   "context": "VimControl && !menu",
    //   "bindings": {
    //     "w": "vim::NextSubwordStart",
    //     "b": "vim::PreviousSubwordStart",
    //     "e": "vim::NextSubwordEnd",
    //     "g e": "vim::PreviousSubwordEnd"
    //   }
    // },
]
